IMPLEMENTATION
The solution implements merge sort algorithm which is a divide and conquer algorithm. However instead of sorting priorities in ascending order
we will be sorting the priority array in descending order

Divide: where the given array is broken into half recursively until only single element array is left (done through mergeSort method). Since single element
arrays are trivially sorted as there are no element to compare to, we then move to conquer

Conquer: A private variable count is initialised to 0 and aims to keep track of the number of fines issues. While merging the smaller subarrays, count 
is incremented by the number of elements that was misplaced. 

The items broken down is recursively merged (done through merge method) until a complete sorted array is formed. The arrays broken down is then passed 
through to merge function which will keep hold of two reference array “leftArray” and “rightArray”; “leftArray” and “rightArray” will be filled with the 
elements on left-and right-hand side of the priority subarrays respectively. Two index pointers “leftIndex” and “rightIndex” are used to compare the 
elements of the subarrays. 

Given that left and right index are the same; if an item on the right subarray at current index is greater than that index of left subarray
 -> indicates a fine should be issued. Count is incremented by the number of items yet to be processed in the left array as when a ship fails to give way
it incurs not just one file but a file for every single ship with higher priority that it cut off.


Proof of correctness:
Divide: the method will always terminate as the breakpoint (base case) is set when end is <= start. Furthermore, an array of size 1 is always trivially 
sorted 
Conquer: the method will always terminate at either leftIndex or rightIndex will at one point be equal to the array length
To prove that conquer is always correct; it can be observed that once an element is placed into the sortedarray S,
it is the maximum between itself and the item being it is being compared to. 

let L be the left index and L is at index i which 0<i<L.length 
let R be the left index and R is at index j which 0<j<R.length 

comparison of L[i] and R[j] will be trivial and thus the largest element of the two will be inputed such as
L[i] > R[j] => > L[i] is inputed into S. Only when R[i] > L[i] a failure to giveway is indicated and count will be incremented accordingly

We can say that fines will always be calculated correctly as the priority array after mergesort will be sorted correctly in descending order and while 
sorting; fines is incremented with all of the higher priority ships that it cut off (increment count by unmarked element of leftArray)


COMPLEXITY
The time complexity of this implementation is O(NlogN) where N is the number of ships that passed. Merge sort is a divide and conquer algorithm and 
the priority array is repeatedly halved. 

Divide: computes the middle of each priorities subarray passed in taking O(1) times – constant time 
Conquer: recursively pass in the two subarrays into merge and sort them in descending order. As arrays are halved into subarrays, this requires 
O(logN) times
Merge: merging of N elements takes O(N) times

Therefore, the overall computational time complexity of this implementation takes O(NlogN) times

