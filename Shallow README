Implementation:

Uses Dijkstra single source shortest path algorithm to find the minimum depth to each point. Dijkstra algorithm is implemented with with priority queue 
represented by a min heap.

Maintain a priority queue (pq) of type Edge to store all the edges. In pq, edges with smaller depth have higher priority. Array d and array seen of 
size ports will be used to keep track of the minimum depth till date of a port and whether that port had been visited respectively. 

Initially, d[originalPort] is set to MAX.VALUE and added to pq. Loop through pq as long as it is not empty and perform the following:
•	Dequeue the current edge and store its vertex in variable “vertex”
•	Mark seen[vertex] to be 1 
•	Loop through Lanes and if the lanes arrive (vertex) is connected to the current vertex and it has not been seen => check if both the edge’s depth and
the depth of the current path so far is larger than the depth of the arrival port. 
- If yes, replace d[arrive] with the smaller value between depth and d[depart]
•	Add the new edge to pq

Proof of correctness: 
Let D(s,u) be the actual minimum depth between s to u
Let d(s,u) be the minimum depth our algorithm computed
We say as soon as a vertex is dequeued from PQ and marked as visited; its minimum depth is finalised or d(s,u) = D(s,u)

Contradiction - Dijkstra algorithm
supposed if this is false and there exist a vertex when dequeued from pq d(s,u) != D(s,u)
Let x be the first vertex along this incorrect path (assume all previous path were correct); there exist a path with min depth > 0 from s to x and a 
path greater than 0 from x to its predesscor y which belongs to the queue

d[y] = D[y] as x,y would have beened examined when x was added to the set of elements removed from pq
as y will be before u on path p (s-> u); 
D(s,y) < D(s,u) thus d[y] < d[u]
however, u was dequed from pq before y thus d[u] <= d[u]

=> can only happen if d[u] = D[s,u) = D(s,y) = d[y]
=> contradict intial assumption that d[u] != D[s,u]

As we can now prove that Dijkstra algorithm is correct by contracdiction; our algorithm implement the underlying theorem of Dijkstra and thus will always
finalise the minimum depth once a port is marked visited. 
One different point in algorithm is how we worked out the minimum depth. 
Let p be the port currently being examined
In query q there presents {p, i, newDepth}
If the minimum depth to arrive to p and the new depth are both larger than current d[i] or if d[i] == 0 (never been accounted for);
there exist an alterative pathway with a greater minimum depth than that of d[i] that we previously decided on. 

d[p] >= newDepth > d[i] is trivial to calculate thus will always produce the correct output. 
We then replace d[i] with the smaller value between d[p] and newDepth - also trival output; will always be correct


Complexity:
The time complexity of this implementation is O(PL) where P is the number of ports and L is the number of lane queries. 

•	O(L): as the function iterates through the lanes array to visit all vertex and all of its adjacent edges
•	O(P): to account for the number of ports needs to be added to the priority queue and processed 


