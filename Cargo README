IMPLEMENTATION
The solution used Fenwick tree as its underlying data structure. Two fenwicktree maintaining reference to update the cargoMasses at each port based on 
collect and deliver.  Upon each queries in queries; fenwick tree call updat methods to update the array at collect and at deliver

The cargo mass at the collection port of each queries is mapped to mass1 and mass2 respectively of the two fenwick tree. This is done through the call to 
method getSum of fenwick tree which return the prefix sum of the ports from 0 to the collect port.

Map3 will return the result of the ports

Proof of correctness:
Given the array a[] represent the cargoMass at each port; we have fwt[] desgined to update and query a[]
we have: 
fwt[1] = a[1]
fwt[2] = fwt[1] + a[2]
fwt[3] = a[3]

The formalised prove of correctness of Fenwick tree can be found at Fenwick Tree and its Application in Solving the Sum of Subsequence (2014).
But in short: 


Update: 
if a[i] was changed, there are elements in fwt that needs to be revised:
FWT(p1), FWT(p2),..., FWT(pm) where (p| i1 < i2 < ... < m) such that p1< p2 < .. < m
Update is proved to be correct by induction as fwt[i] modified after the update query will always
reflect the correct sum in relation to a[]

getSum:
fwt[i] is the parents and will always hold the sum of its previous child lsb index. 
thus if we wish to find the sum of a[] array at fwt[i], we increment the sum with fwt[i] then clear the last significant bit as we 
traverse the array as fwt[i] would have already contained the sum of this child. 

As we can now prove that update and query will always produce the correct output, our array to update the collect with cargoMass and 
deliver with CargoMass will expect the right output. The subtraction of array1[] and array2[] will be trivial which leaves us with the correct cargo
mass at collect port of each query


COMPLEXITY
The overall time complexity of the solution is O(Query.log(stops))

The solution implements a Fenwick tree (Binary Indexed Tree) as its underlying data structure. The foundation of Fenwick tree builds on the fact that
all integers can be represented as sum of powers of two. 


Thus, when updating the array at a particular position, Fenwick tree implementation requires updates to be done to the parents of the index or the 
index + its last significant set bit. This requires O(logn) time – where n is the number of stops. 

And getting the sum of the array from 0 to a particular index requires adding array[currentIndex] to the values of children index or the index – its 
last significant set bit. This also requires O(logn) times - where n is the number of stops.

Looping through queries to retrieve data: O(n) times where n is the number of queries;
Update fenwick tree and get array: O(logn) time and the array traversal will update/ get sum of the index then increment/decrement it by its least 
significant set bit instead of the usual +/- 1 like in regular for loop

Total time: O(Queries. 2log(stops))



Reference
Pan, D., & Chen, Y. (2014) Fenwick Tree and its Application in Solving the Sum of Subsequence. International Journal of Engineering Technology and Advanced Engineering. Vol 4 Issues 7
